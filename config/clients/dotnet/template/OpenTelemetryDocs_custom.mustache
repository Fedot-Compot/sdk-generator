## Configuration

See the OpenTelemetry docs on [Customizing the SDK](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md).

```csharp
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using OpenFga.Sdk.Telemetry;
using OpenTelemetry;
using OpenTelemetry.Metrics;
using OpenTelemetry.Resources;
using System.Diagnostics;

namespace Example {
    public class Example {
        public static async Task Main() {
            try {
                // Setup OpenTelemetry Metrics
                using var meterProvider = Sdk.CreateMeterProviderBuilder()
                    .AddHttpClientInstrumentation() // To instrument the default http client
                    .AddMeter(Metrics.Name) // .AddMeter("OpenFga.Sdk") also works
                    .ConfigureResource(resourceBuilder => resourceBuilder.AddService("openfga-dotnet-example"))
                    .AddOtlpExporter() // Required to export to an OTLP compatible endpoint
                    .AddConsoleExporter() // Only needed to export the metrics to the console (e.g. when debugging)
                    .Build();

                // Configure the OpenFGA SDK with default configuration (default metrics and attributes will be enabled)
                var configuration = new ClientConfiguration() {
                    ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"),
                    StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"),
                    AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"),
                    // Credentials = ... // If needed
                };
                var fgaClient = new OpenFgaClient(configuration);

                // Call the SDK normally
                var response = await fgaClient.ReadAuthorizationModels();
            } catch (ApiException e) {
                 Debug.Print("Error: "+ e);
            }
        }
    }
}
```

#### Customize metrics
You can can customize the metrics that are enabled and the attributes that are included in the metrics by setting the `TelemetryConfig` property on the `ClientConfiguration` object.
If you do set the `Telemetry` property to anything other than `null`, the default configuration will be overridden.

```csharp
TelemetryConfig telemetryConfig = new () {
    Metrics = new Dictionary<string, MetricConfig> {
        [TelemetryMeters.TokenExchangeCount] = new () {
            Attributes = new HashSet<string> {
                TelemetryAttribute.HttpScheme,
                TelemetryAttribute.HttpMethod,
                TelemetryAttribute.HttpHost,
                TelemetryAttribute.HttpStatus,
                TelemetryAttribute.HttpUserAgent,
                TelemetryAttribute.RequestMethod,
                TelemetryAttribute.RequestClientId,
                TelemetryAttribute.RequestStoreId,
                TelemetryAttribute.RequestModelId,
                TelemetryAttribute.RequestRetryCount,
                TelemetryAttribute.ResponseModelId
            }
        },
        [TelemetryMeters.QueryDuration] = new () {
            Attributes = new HashSet<string> {
                TelemetryAttribute.HttpStatus,
                TelemetryAttribute.HttpUserAgent,
                TelemetryAttribute.RequestMethod,
                TelemetryAttribute.RequestClientId,
                TelemetryAttribute.RequestStoreId,
                TelemetryAttribute.RequestModelId,
                TelemetryAttribute.RequestRetryCount,
            }
        },
        [TelemetryMeters.QueryDuration] = new () {
            Attributes = new HashSet<string> {
                TelemetryAttribute.HttpStatus,
                TelemetryAttribute.HttpUserAgent,
                TelemetryAttribute.RequestMethod,
                TelemetryAttribute.RequestClientId,
                TelemetryAttribute.RequestStoreId,
                TelemetryAttribute.RequestModelId,
                TelemetryAttribute.RequestRetryCount,
            }
        },
    }
};

var configuration = new ClientConfiguration() {
    ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"),
    StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"),
    AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"),
    // Credentials = ... // If needed
    Telemetry = telemetryConfig
};
```

### More Resources
* [OpenTelemetry.Instrumentation.Http](https://github.com/open-telemetry/opentelemetry-dotnet-contrib/blob/main/src/OpenTelemetry.Instrumentation.Http/README.md) for instrumenting the HttpClient.
* If you are using .NET 8+, checkout the built-in metrics.

A number of these metrics are baked into .NET 8+ as well:

## Example

There is an [example project](https://github.com/openfga/dotnet-sdk/blob/main/example/OpenTelemetryExample) that provides some guidance on how to configure OpenTelemetry available in the examples directory.
