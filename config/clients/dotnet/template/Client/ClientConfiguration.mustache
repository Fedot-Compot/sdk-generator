{{>partial_header}}

using System.Text.RegularExpressions;

using {{packageName}}.Client.Model;
using {{packageName}}.Exceptions;

namespace {{packageName}}.Client;

public class ClientConfiguration : Configuration.Configuration {
    public ClientConfiguration(Configuration.Configuration config) {
        ApiScheme = config.ApiScheme;
        ApiHost = config.ApiHost;
        ApiUrl = config.ApiUrl;
        UserAgent = config.UserAgent;
        Credentials = config.Credentials;
        DefaultHeaders = config.DefaultHeaders;
        RetryParams = new RetryParams {MaxRetry = config.MaxRetry, MinWaitInMs = config.MinWaitInMs};
    }

    public ClientConfiguration() { }

    /// <summary>
    ///     Gets or sets the Store  ID.
    /// </summary>
    /// <value>Store ID.</value>
    public string? StoreId { get; set; }

    /// <summary>
    ///     Gets or sets the Authorization Model ID.
    /// </summary>
    /// <value>Authorization Model ID.</value>
    public string? AuthorizationModelId { get; set; }

    public RetryParams? RetryParams { get; set; } = new();

    public new void IsValid() {
        base.IsValid();

        if (StoreId != null && !IsWellFormedUlidString(StoreId)) {
          throw new FgaValidationError("StoreId is not in a valid ulid format");
        }

        if (AuthorizationModelId != null && AuthorizationModelId != "" && !IsWellFormedUlidString(AuthorizationModelId)) {
          throw new FgaValidationError("AuthorizationModelId is not in a valid ulid format");
        }
    }

    /// <summary>
    /// Ensures that a string is in valid [ULID](https://github.com/ulid/spec) format
    /// </summary>
    /// <param name="ulid"></param>
    /// <returns></returns>
    public static bool IsWellFormedUlidString(string ulid) {
        var regex = new Regex("^[0-7][0-9A-HJKMNP-TV-Z]{25}$");
        return regex.IsMatch(ulid);
    }
}
