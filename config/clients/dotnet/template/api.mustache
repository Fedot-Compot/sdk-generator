{{>partial_header}}

using {{packageName}}.ApiClient;
using {{packageName}}.Exceptions;
using {{packageName}}.{{modelPackage}};

namespace {{packageName}}.{{apiPackage}};

public class {{classname}} : IDisposable {
    private Configuration.Configuration _configuration;
    private ApiClient.ApiClient _apiClient;

    /// <summary>
    /// Initializes a new instance of the <see cref="{{classname}}"/> class.
    /// </summary>
    /// <param name="configuration"></param>
    /// <param name="httpClient"></param>
    public {{classname}}(
        Configuration.Configuration configuration,
        HttpClient? httpClient = null
    ) {
        configuration.IsValid();
        this._configuration = configuration;
        this._apiClient = new ApiClient.ApiClient(_configuration, httpClient);
    }

    {{#operations}}
    {{#operation}}
    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    /// <exception cref="{{packageName}}.Exceptions.ApiException">Thrown when fails to make API call</exception>
    {{#allParams}}
    /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
    {{/allParams}}
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of {{returnType}}{{^returnType}}void{{/returnType}}</returns>
    {{#isDeprecated}}
    [Obsolete]
    {{/isDeprecated}}
    {{#returnType}}public async Task<{{{.}}}>{{/returnType}}{{^returnType}}public async Task{{/returnType}} {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default({{{dataType}}}){{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}CancellationToken cancellationToken = default) {
        var pathParams = new Dictionary<string, string> {};
        {{#pathParams.0}}
        if (string.IsNullOrWhiteSpace(storeId)) {
            throw new FgaRequiredParamError("{{operationId}}", "StoreId");
        }
        {{/pathParams.0}}

        {{#pathParams}}
        if ({{paramName}} != null) {
            pathParams.Add("{{baseName}}", {{paramName}}.ToString());
        }
        {{/pathParams}}
        var queryParams = new Dictionary<string, string>();
        {{#queryParams}}
        if ({{paramName}} != null) {
            queryParams.Add("{{baseName}}", {{paramName}}.ToString());
        }
        {{/queryParams}}

        var requestBuilder = new RequestBuilder {
            Method = new HttpMethod("{{httpMethod}}"),
            BasePath = _configuration.BasePath,
            PathTemplate = "{{path}}",
            PathParameters = pathParams,
            {{#bodyParam}}
            Body = Utils.CreateJsonStringContent({{paramName}}),
            {{/bodyParam}}
            QueryParameters = queryParams,
        };

        {{#returnType}}return {{/returnType}}await this._apiClient.SendRequestAsync{{#returnType}}<{{{.}}}>{{/returnType}}(requestBuilder,
            "{{operationId}}", cancellationToken);
    }

    {{/operation}}
    {{/operations}}

    public void Dispose() {
        _apiClient.Dispose();
    }
}
