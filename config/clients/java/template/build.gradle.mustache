plugins {
    id 'java'

    // Quality
    id 'jacoco'
    id 'jvm-test-suite'
    id 'com.diffplug.spotless' version '6.23.3'

    // IDE
    id 'idea'
    id 'eclipse'

    // Publishing
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

apply from: 'publish.gradle'

group = '{{groupId}}'
version = '{{packageVersion}}'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    withJavadocJar()
    withSourcesJar()
}

javadoc {
    // Ignore warnings.
    options.addStringOption('Xdoclint:none', '-quiet')
}

test {
    // JaCoCo coverage report is always generated after tests run.
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    // tests are required to run before generating a JaCoCo coverage report.
    dependsOn test
}

ext {
    {{#swagger1AnnotationLibrary}}
    swagger_annotations_version = "1.6.9"
    {{/swagger1AnnotationLibrary}}
    {{#swagger2AnnotationLibrary}}
    swagger_annotations_version = "2.2.9"
    {{/swagger2AnnotationLibrary}}
    jackson_version = "2.16.0"
    junit_version = "5.10.1"
    {{#hasFormParamsInSpec}}
    httpmime_version = "4.5.13"
    {{/hasFormParamsInSpec}}
}

dependencies {
    {{#swagger1AnnotationLibrary}}
    implementation "io.swagger:swagger-annotations:$swagger_annotations_version"
    {{/swagger1AnnotationLibrary}}
    {{#swagger2AnnotationLibrary}}
    implementation "io.swagger.core.v3:swagger-annotations:$swagger_annotations_version"
    {{/swagger2AnnotationLibrary}}
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    implementation "org.openapitools:jackson-databind-nullable:0.2.6"
    {{#hasFormParamsInSpec}}
    implementation "org.apache.httpcomponents:httpmime:$httpmime_version"
    {{/hasFormParamsInSpec}}
}

testing {
    suites {
        test {
            useJUnitJupiter()

            dependencies {
                implementation project()
                implementation "org.junit.jupiter:junit-jupiter:$junit_version"
                implementation "org.mockito:mockito-core:5.+"
                runtimeOnly "org.junit.platform:junit-platform-launcher"

                // This test-only dependency is convenient but not widely used.
                // Review project activity before updating the version here.
                // See also: https://github.com/PGSSoft/HttpClientMock/issues/3
                implementation "com.pgs-soft:HttpClientMock:1.0.0"
            }

            targets {
                all {
                    testTask.configure {
                        testLogging {
                            exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
                            showStandardStreams = true
                        }
                    }
                }
            }
        }
        integration(JvmTestSuite) {
            testType = TestSuiteType.INTEGRATION_TEST
            useJUnitJupiter()

            dependencies {
                implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
                implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
                implementation project()
            }

            sources {
                java {
                    srcDirs = ['src/test-integration/java']
                }
            }

            targets {
                all {
                    testTask.configure {
                        testLogging {
                            exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
                            showStandardStreams = true
                        }
                    }
                }
            }
        }
    }
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false
    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'
        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        palantirJavaFormat()
        removeUnusedImports()
        importOrder()
    }
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
tasks.register('fmt') {
    dependsOn 'spotlessApply'
}

tasks.register('test-integration') {
    dependsOn testing.suites.integration
}

tasks.named('check').configure {
    dependsOn 'spotlessCheck'
}
