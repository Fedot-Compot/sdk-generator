# coding: utf-8
{{>partial_header}}

from {{packageName}}.configuration import Configuration
from {{packageName}}.exceptions import FgaValidationException
from {{packageName}}.validation import is_well_formed_ulid_string

class ClientConfiguration(Configuration):
    """
    OpenFGA client configuration
    """

    def __init__(
            self,
            api_scheme="https",
            api_host=None,
            store_id=None,
            credentials=None,
            retry_params=None,
            authorization_model_id=None,
            ssl_ca_cert=None,
        ):
        super().__init__(api_scheme, api_host, store_id, credentials, retry_params, ssl_ca_cert=ssl_ca_cert)
        self._authorization_model_id = authorization_model_id

    def is_valid(self):
        super().is_valid()

        if self.authorization_model_id is not None and self.authorization_model_id != "" and is_well_formed_ulid_string(self.authorization_model_id) is False:
            raise FgaValidationException(
                "authorization_model_id ('%s') is not in a valid ulid format" % self.authorization_model_id)

    @property
    def authorization_model_id(self):
        return self._authorization_model_id

    @authorization_model_id.setter
    def authorization_model_id(self, value):
        self._authorization_model_id = value
